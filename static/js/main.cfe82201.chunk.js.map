{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","lastUpdate","deaths","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varaint","start","end","value","cduration","separator","Date","toDateString","duration","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","console","log","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","default","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4NCuEpJC,EA5DD,SAAC,GAAsD,IAAD,IAApDC,KAAQC,EAA4C,EAA5CA,UAAUC,EAAkC,EAAlCA,UAAiBC,GAAiB,EAAxBC,OAAwB,EAAjBD,YAK/C,OAAIF,EAIA,yBAAKI,UAAWC,IAAOC,WACvB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UACnC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOY,WACxE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACAC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,UAAW,IACXC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAQ,iBAAiB,IAAIQ,KAAK1B,GAAY2B,gBAC1D,kBAACV,EAAA,EAAD,CAAYC,MAAQ,iBAApB,wCAGR,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOJ,YACxE,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACAC,MAAO,EACPC,IAAKvB,EAAUwB,MACfK,SAAU,IACVH,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAQ,iBAAiB,IAAIQ,KAAK1B,GAAY2B,gBAC1D,kBAACV,EAAA,EAAD,CAAYC,MAAQ,iBAApB,0CAGR,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOF,SACxE,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACAC,MAAO,EACPC,IAAKvB,EAAUwB,MACfK,SAAU,IACVH,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAQ,iBAAiB,IAAIQ,KAAK1B,GAAY2B,gBAC1D,kBAACV,EAAA,EAAD,CAAYC,MAAQ,iBAApB,yCA/CF,a,yBChBTW,EAAM,iCAECC,EAAS,uCAAG,WAAMC,GAAN,6BAAAC,EAAA,6DACjBC,EAAgBJ,EACjBE,IACCE,EAAc,GAAD,OAAIJ,EAAJ,sBAAqBE,IAHjB,kBAUkDG,IAAMC,IAAIF,GAV5D,2BAUVpC,KAAOC,EAVG,EAUHA,UAAYC,EAVT,EAUSA,UAAYE,EAVrB,EAUqBA,OAAQD,EAV7B,EAU6BA,WACxCoC,EAAe,CACjBtC,YACAC,YACAE,SACAD,cAfa,kBAkBVoC,GAlBU,4FAAH,sDA4BTC,EAAc,uCAAG,gCAAAL,EAAA,+EAEAE,IAAMC,IAAN,UAAaN,EAAb,WAFA,uBAEfhC,EAFe,EAEfA,KAEDuC,EAAevC,EAAKyC,KAAI,SAACC,GAAD,MAAgB,CACzCzC,UAAWyC,EAAUzC,UAAU0C,MAC/BvC,OAAOsC,EAAUtC,OAAOuC,MACxBC,KAAKF,EAAUG,eAPE,kBASjBN,GATiB,yFAAH,qDAedO,EAAc,uCAAG,8BAAAX,EAAA,+EAEaE,IAAMC,IAAN,UAAaN,EAAb,eAFb,uBAEPe,EAFO,EAEf/C,KAAQ+C,UAFO,kBAGfA,EAAUN,KAAI,SAACP,GAAD,OAAaA,EAAQc,SAHpB,gCAKtBC,QAAQC,IAAR,MALsB,yDAAH,qD,yBCiBZC,EA5DD,SAAC,GAAiD,IAAD,IAA/CnD,KAAMC,EAAyC,EAAzCA,UAAUG,EAA+B,EAA/BA,OAAOF,EAAwB,EAAxBA,UAAWgC,EAAa,EAAbA,QAAa,EAC1BkB,mBAAS,IADiB,mBACpDV,EADoD,KAC1CW,EAD0C,KAE3DC,qBAAW,YACO,uCAAG,sBAAAnB,EAAA,kEACbkB,EADa,SACMb,IADN,6EAAH,qDAIde,KACF,IACF,IAAMC,EACNd,EAAUe,OAER,kBAAC,IAAD,CACCzD,KAAM,CACF0D,OAAOhB,EAAUD,KAAI,qBAAGG,QACxBe,SAAU,CAAC,CACV3D,KAAK0C,EAAUD,KAAI,qBAAExC,aACrB2D,MAAM,WACNC,YAAY,UACZC,MAAK,GACH,CACC9D,KAAK0C,EAAUD,KAAI,qBAAGrC,UACtBwD,MAAM,SACNC,YAAY,MACZE,gBAAgB,oBAChBD,MAAK,OAGR,KAEFE,EACF/D,EAEI,kBAAC,IAAD,CACAD,KAAM,CACF0D,OAAO,CAAC,WAAW,YAAY,UAC/BC,SAAS,CAAC,CACNC,MAAM,SACNG,gBAAgB,CAChB,oBACA,oBACA,qBAEC/D,KAAK,CAACC,EAAUyB,MAAMxB,EAAUwB,MAAMtB,EAAOsB,UAItDuC,QAAS,CACLC,OAAO,CAACC,SAAQ,GAChBC,MAAM,CAACD,SAAQ,EAAME,KAAK,oBAAD,OAAqBnC,OAGlD,KAER,OACI,yBAAK7B,UAAWC,IAAOC,WAClB2B,EAAQ8B,EAASR,I,mCCrCfc,EAnBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACInB,mBAAS,IADb,mBACtCoB,EADsC,KACnBC,EADmB,KAU7C,OARAnB,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbsC,EADa,SACa3B,IADb,6EAAH,qDAIdS,KACD,CAACkB,IAGA,kBAACC,EAAA,EAAD,CAAarE,UAAWC,IAAOoE,aAC3B,kBAACC,EAAA,EAAD,CAAcC,QAAS,GAAGC,SAAW,SAACC,GAAD,OAAOP,EAAoBO,EAAEC,OAAOrD,SACrE,4BAAQA,MAAM,UAAd,WACC8C,EAAiB/B,KAAI,SAACP,EAAQ8C,GAAT,OAAe,4BAAQC,IAAKD,EAAGtD,MAAOQ,GAAUA,S,iBC4BvEgD,E,4MA1BXC,MAAQ,CACJnF,KAAM,GACNkC,QAAS,I,EAEbqC,oB,uCAAsB,WAAOrC,GAAP,eAAAC,EAAA,sEAEIF,EAAUC,GAFd,OAEhBkD,EAFgB,OAGtB,EAAKC,SAAS,CAACrF,KAAKoF,EAAYlD,QAAQA,IAHlB,2C,wPAZQD,I,OAApBmD,E,OACNE,KAAKD,SAAS,CAACrF,KAAKoF,I,qIAiBd,IAAD,EACkBE,KAAKH,MAArBnF,EADF,EACEA,KAAKkC,EADP,EACOA,QAIZ,OACA,yBAAK7B,UAAWC,IAAOC,WACnB,8CACA,kBAAC,EAAD,CAAOP,KAAMA,IACb,kBAAC,EAAD,CAAeuE,oBAAqBe,KAAKf,sBACzC,kBAAC,EAAD,CAAOvE,KAAMA,EAAMkC,QAASA,S,GAnCtBqD,IAAMC,WCAxBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U,mBCJhD/F,EAAOC,QAAU,CAAC,UAAY,2B,wCCA9BD,EAAOC,QAAU,CAAC,UAAY,yB","file":"static/js/main.cfe82201.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2Zj37\",\"card\":\"Cards_card__3OgvF\",\"infected\":\"Cards_infected__16LUn\",\"recovered\":\"Cards_recovered__1H3Yt\",\"deaths\":\"Cards_deaths__1NOlL\"};","import React from 'react';\r\n\r\nimport {Card, CardContent , Typography,Grid} from '@material-ui/core';\r\n/*we will be using card\r\n    component of material-ui */\r\nimport cx from 'classnames';\r\n/*classnames is an external module\r\nthat can be used to club multiple\r\ncss files together */\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\n\r\nconst Cards = ({data : {confirmed,recovered,deaths,lastUpdate}}) => {\r\n    /*we receive props in form of entire\r\n     data, so we will be de-struturing data\r\n     and accordingly we will receive values.\r\n      */\r\n    if(!confirmed) {\r\n        return 'Loading..';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n         <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n             <CardContent>\r\n                 <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                 <Typography varaint=\"h5\">\r\n                     <CountUp\r\n                     start={0}\r\n                     end={confirmed.value}\r\n                     cduration={2.5}\r\n                     separator=\",\"\r\n                     />\r\n                 </Typography>\r\n                 <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>   \r\n                 <Typography color = \"textSecondary\">Number of Active Cases of Covid-19</Typography>    \r\n             </CardContent>\r\n         </Grid>\r\n         <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n             <CardContent>\r\n                 <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                 <Typography varaint=\"h5\">\r\n                     <CountUp\r\n                     start={0}\r\n                     end={recovered.value}\r\n                     duration={2.5}\r\n                     separator=\",\"\r\n                     />\r\n                 </Typography>\r\n                 <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>   \r\n                 <Typography color = \"textSecondary\">Number of recovery Cases of Covid-19</Typography>    \r\n             </CardContent>\r\n         </Grid>\r\n         <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n             <CardContent>\r\n                 <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                 <Typography varaint=\"h5\">\r\n                     <CountUp\r\n                     start={0}\r\n                     end={recovered.value}\r\n                     duration={2.5}\r\n                     separator=\",\"\r\n                     />\r\n                 </Typography>\r\n                 <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>    \r\n                 <Typography color = \"textSecondary\">Number of death Cases of Covid-19</Typography>    \r\n             </CardContent>\r\n         </Grid>\r\n         </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios';\r\n/* for accesing api axios is used */\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n    if(country) {\r\n        changeableUrl=`${url}/countries/${country}`;\r\n\r\n    }\r\n    try {\r\n        /*here,since we only want the specific section of object,\r\n        we modify the object accordingly and data is broken accordingly from\r\n        object it can be given as: */\r\n        const {data: {confirmed , recovered , deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n\r\n        }\r\n        return modifiedData;\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n}\r\n/*here we are directly returning the\r\napi response to the export section */\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data } = await axios.get(`${url}/daily`);\r\n         /*destructuring and storing the array in data */\r\n        const modifiedData = data.map((dailyData) => ({\r\n             confirmed: dailyData.confirmed.total,\r\n             deaths:dailyData.deaths.total,\r\n             date:dailyData.reportDate,\r\n            }));\r\n      return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const {data : {countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React,{useState , useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line , Bar} from 'react-chartjs-2';\r\nimport styles from \"./Chart.module.css\";\r\nconst Chart = ({data:{confirmed,deaths,recovered},country}) => {\r\n    const [dailyData,setDailyData] = useState([]);\r\n    useEffect( () => {\r\n        const fetchAPI = async ()  => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n       \r\n        fetchAPI();\r\n    },[]);\r\n    const lineChart = (\r\n    dailyData.length //if 0 ,its false\r\n    ? (\r\n      <Line \r\n       data={{\r\n           labels:dailyData.map(({ date }) => date),\r\n           datasets: [{\r\n            data:dailyData.map(({confirmed}) => confirmed),\r\n            label:'Infected',\r\n            borderColor:'#3333ff',\r\n            fill:true,\r\n           }, {\r\n               data:dailyData.map(({ deaths}) => deaths),\r\n               label:'Deaths',\r\n               borderColor:'red',\r\n               backgroundColor:'rgba(255,0,0,0.5)',\r\n               fill:true,\r\n           }],\r\n        }}\r\n      />) : null \r\n    );\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n            data={{\r\n                labels:['Infected','Recovered','Deaths'],\r\n                datasets:[{\r\n                    label:'people',\r\n                    backgroundColor:[\r\n                    'rgba(0,0,255,0.5)',\r\n                    'rgba(0,255,0,0.5)',\r\n                    'rgba(255,0,0,0.5)',\r\n                     ],\r\n                     data:[confirmed.value,recovered.value,deaths.value]\r\n                       }]\r\n\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true, text:`current state in ${country}`}\r\n            }}\r\n            />\r\n        ) : null\r\n    );\r\n    return (\r\n        <div className={styles.container}>\r\n            {country?barChart:lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart;","import React,{useState , useEffect} from 'react';\r\nimport {NativeSelect , FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries , setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n    /*changes only when setFetchedCountries Changes. */\r\n    return (\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect default =\"\" onChange= {(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"global\"> Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","import React from 'react';\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\n\r\nclass App extends React.Component {\r\n\r\n    /*since we are handling asynchronous \r\n    request, thus asynchorous data is to be rendered\r\n    as such ,t is called once in the component life cycle and it signals that the component and all its sub-components have rendered properly. This is the best place to make API calls since, at this point, the component has been mounted and is available to the DOM. */\r\n\r\n  async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({data:fetchedData});\r\n        /*what we did here, is we stored the fetched data,\r\n          and stored it in the data object of state. */\r\n    }\r\n    /*now that we have data in our state,\r\n    we can manipulate it in cards and other\r\n    components */\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n    handleCountryChange = async (country) => {\r\n        //fetch the data and set the state later.\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({data:fetchedData,country:country})\r\n\r\n    }\r\n    render() {\r\n        const {data,country} = this.state;\r\n        /*creating a varible of data\r\n        so that we can impilicitly pass\r\n        a reference of data. */\r\n        return (\r\n        <div className={styles.container}>\r\n            <h1>Corona Tracker</h1>\r\n            <Cards data={data}></Cards>\r\n            <CountryPicker handleCountryChange={this.handleCountryChange}></CountryPicker>\r\n            <Chart data={data} country={country}></Chart>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__WD18g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1Z67f\"};"],"sourceRoot":""}